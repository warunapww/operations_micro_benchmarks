/** size of A = 640
    size of B = 600
    gridDim = 60
    blockDim = 64
    k= 10000
    x = 10
**/

__global__ void MultiplyVectors(const float* A, const float* B, float* C, int x, int k)
{
	int B_start_index = (blockIdx.x*gridDim.y + blockIdx.y)*x;
	int A_start_index = (threadIdx.x*blockDim.y + threadIdx.y)*x;
	int C_width = x*gridDim.x*gridDim.y;


	int t;
	float c_0_0, c_0_1, c_0_2, c_0_3, c_0_4, c_0_5, c_0_6, c_0_7, c_0_8, c_0_9, c_1_0, c_1_1, c_1_2, c_1_3, c_1_4, c_1_5, c_1_6, c_1_7, c_1_8, c_1_9, c_2_0, c_2_1, c_2_2, c_2_3, c_2_4, c_2_5, c_2_6, c_2_7, c_2_8, c_2_9, c_3_0, c_3_1, c_3_2, c_3_3, c_3_4, c_3_5, c_3_6, c_3_7, c_3_8, c_3_9, c_4_0, c_4_1, c_4_2, c_4_3, c_4_4, c_4_5, c_4_6, c_4_7, c_4_8, c_4_9, c_5_0, c_5_1, c_5_2, c_5_3, c_5_4, c_5_5, c_5_6, c_5_7, c_5_8, c_5_9, c_6_0, c_6_1, c_6_2, c_6_3, c_6_4, c_6_5, c_6_6, c_6_7, c_6_8, c_6_9, c_7_0, c_7_1, c_7_2, c_7_3, c_7_4, c_7_5, c_7_6, c_7_7, c_7_8, c_7_9, c_8_0, c_8_1, c_8_2, c_8_3, c_8_4, c_8_5, c_8_6, c_8_7, c_8_8, c_8_9, c_9_0, c_9_1, c_9_2, c_9_3, c_9_4, c_9_5, c_9_6, c_9_7, c_9_8, c_9_9;
	float a_0, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9;
	float b_0, b_1, b_2, b_3, b_4, b_5, b_6, b_7, b_8, b_9;


	a_0 = A[A_start_index+0];
	a_1 = A[A_start_index+1];
	a_2 = A[A_start_index+2];
	a_3 = A[A_start_index+3];
	a_4 = A[A_start_index+4];
	a_5 = A[A_start_index+5];
	a_6 = A[A_start_index+6];
	a_7 = A[A_start_index+7];
	a_8 = A[A_start_index+8];
	a_9 = A[A_start_index+9];


	b_0 = B[B_start_index+0];
	b_1 = B[B_start_index+1];
	b_2 = B[B_start_index+2];
	b_3 = B[B_start_index+3];
	b_4 = B[B_start_index+4];
	b_5 = B[B_start_index+5];
	b_6 = B[B_start_index+6];
	b_7 = B[B_start_index+7];
	b_8 = B[B_start_index+8];
	b_9 = B[B_start_index+9];


	c_0_0 = 0;
	c_0_1 = 0;
	c_0_2 = 0;
	c_0_3 = 0;
	c_0_4 = 0;
	c_0_5 = 0;
	c_0_6 = 0;
	c_0_7 = 0;
	c_0_8 = 0;
	c_0_9 = 0;
	c_1_0 = 0;
	c_1_1 = 0;
	c_1_2 = 0;
	c_1_3 = 0;
	c_1_4 = 0;
	c_1_5 = 0;
	c_1_6 = 0;
	c_1_7 = 0;
	c_1_8 = 0;
	c_1_9 = 0;
	c_2_0 = 0;
	c_2_1 = 0;
	c_2_2 = 0;
	c_2_3 = 0;
	c_2_4 = 0;
	c_2_5 = 0;
	c_2_6 = 0;
	c_2_7 = 0;
	c_2_8 = 0;
	c_2_9 = 0;
	c_3_0 = 0;
	c_3_1 = 0;
	c_3_2 = 0;
	c_3_3 = 0;
	c_3_4 = 0;
	c_3_5 = 0;
	c_3_6 = 0;
	c_3_7 = 0;
	c_3_8 = 0;
	c_3_9 = 0;
	c_4_0 = 0;
	c_4_1 = 0;
	c_4_2 = 0;
	c_4_3 = 0;
	c_4_4 = 0;
	c_4_5 = 0;
	c_4_6 = 0;
	c_4_7 = 0;
	c_4_8 = 0;
	c_4_9 = 0;
	c_5_0 = 0;
	c_5_1 = 0;
	c_5_2 = 0;
	c_5_3 = 0;
	c_5_4 = 0;
	c_5_5 = 0;
	c_5_6 = 0;
	c_5_7 = 0;
	c_5_8 = 0;
	c_5_9 = 0;
	c_6_0 = 0;
	c_6_1 = 0;
	c_6_2 = 0;
	c_6_3 = 0;
	c_6_4 = 0;
	c_6_5 = 0;
	c_6_6 = 0;
	c_6_7 = 0;
	c_6_8 = 0;
	c_6_9 = 0;
	c_7_0 = 0;
	c_7_1 = 0;
	c_7_2 = 0;
	c_7_3 = 0;
	c_7_4 = 0;
	c_7_5 = 0;
	c_7_6 = 0;
	c_7_7 = 0;
	c_7_8 = 0;
	c_7_9 = 0;
	c_8_0 = 0;
	c_8_1 = 0;
	c_8_2 = 0;
	c_8_3 = 0;
	c_8_4 = 0;
	c_8_5 = 0;
	c_8_6 = 0;
	c_8_7 = 0;
	c_8_8 = 0;
	c_8_9 = 0;
	c_9_0 = 0;
	c_9_1 = 0;
	c_9_2 = 0;
	c_9_3 = 0;
	c_9_4 = 0;
	c_9_5 = 0;
	c_9_6 = 0;
	c_9_7 = 0;
	c_9_8 = 0;
	c_9_9 = 0;


	for (t = 0; t < 10000; t++) {
		c_0_0 += a_0*b_0;
		c_0_1 += a_0*b_1;
		c_0_2 += a_0*b_2;
		c_0_3 += a_0*b_3;
		c_0_4 += a_0*b_4;
		c_0_5 += a_0*b_5;
		c_0_6 += a_0*b_6;
		c_0_7 += a_0*b_7;
		c_0_8 += a_0*b_8;
		c_0_9 += a_0*b_9;
		c_1_0 += a_1*b_0;
		c_1_1 += a_1*b_1;
		c_1_2 += a_1*b_2;
		c_1_3 += a_1*b_3;
		c_1_4 += a_1*b_4;
		c_1_5 += a_1*b_5;
		c_1_6 += a_1*b_6;
		c_1_7 += a_1*b_7;
		c_1_8 += a_1*b_8;
		c_1_9 += a_1*b_9;
		c_2_0 += a_2*b_0;
		c_2_1 += a_2*b_1;
		c_2_2 += a_2*b_2;
		c_2_3 += a_2*b_3;
		c_2_4 += a_2*b_4;
		c_2_5 += a_2*b_5;
		c_2_6 += a_2*b_6;
		c_2_7 += a_2*b_7;
		c_2_8 += a_2*b_8;
		c_2_9 += a_2*b_9;
		c_3_0 += a_3*b_0;
		c_3_1 += a_3*b_1;
		c_3_2 += a_3*b_2;
		c_3_3 += a_3*b_3;
		c_3_4 += a_3*b_4;
		c_3_5 += a_3*b_5;
		c_3_6 += a_3*b_6;
		c_3_7 += a_3*b_7;
		c_3_8 += a_3*b_8;
		c_3_9 += a_3*b_9;
		c_4_0 += a_4*b_0;
		c_4_1 += a_4*b_1;
		c_4_2 += a_4*b_2;
		c_4_3 += a_4*b_3;
		c_4_4 += a_4*b_4;
		c_4_5 += a_4*b_5;
		c_4_6 += a_4*b_6;
		c_4_7 += a_4*b_7;
		c_4_8 += a_4*b_8;
		c_4_9 += a_4*b_9;
		c_5_0 += a_5*b_0;
		c_5_1 += a_5*b_1;
		c_5_2 += a_5*b_2;
		c_5_3 += a_5*b_3;
		c_5_4 += a_5*b_4;
		c_5_5 += a_5*b_5;
		c_5_6 += a_5*b_6;
		c_5_7 += a_5*b_7;
		c_5_8 += a_5*b_8;
		c_5_9 += a_5*b_9;
		c_6_0 += a_6*b_0;
		c_6_1 += a_6*b_1;
		c_6_2 += a_6*b_2;
		c_6_3 += a_6*b_3;
		c_6_4 += a_6*b_4;
		c_6_5 += a_6*b_5;
		c_6_6 += a_6*b_6;
		c_6_7 += a_6*b_7;
		c_6_8 += a_6*b_8;
		c_6_9 += a_6*b_9;
		c_7_0 += a_7*b_0;
		c_7_1 += a_7*b_1;
		c_7_2 += a_7*b_2;
		c_7_3 += a_7*b_3;
		c_7_4 += a_7*b_4;
		c_7_5 += a_7*b_5;
		c_7_6 += a_7*b_6;
		c_7_7 += a_7*b_7;
		c_7_8 += a_7*b_8;
		c_7_9 += a_7*b_9;
		c_8_0 += a_8*b_0;
		c_8_1 += a_8*b_1;
		c_8_2 += a_8*b_2;
		c_8_3 += a_8*b_3;
		c_8_4 += a_8*b_4;
		c_8_5 += a_8*b_5;
		c_8_6 += a_8*b_6;
		c_8_7 += a_8*b_7;
		c_8_8 += a_8*b_8;
		c_8_9 += a_8*b_9;
		c_9_0 += a_9*b_0;
		c_9_1 += a_9*b_1;
		c_9_2 += a_9*b_2;
		c_9_3 += a_9*b_3;
		c_9_4 += a_9*b_4;
		c_9_5 += a_9*b_5;
		c_9_6 += a_9*b_6;
		c_9_7 += a_9*b_7;
		c_9_8 += a_9*b_8;
		c_9_9 += a_9*b_9;


		a_0 += 10;
		a_1 += 10;
		a_2 += 10;
		a_3 += 10;
		a_4 += 10;
		a_5 += 10;
		a_6 += 10;
		a_7 += 10;
		a_8 += 10;
		a_9 += 10;


		b_0 += 10;
		b_1 += 10;
		b_2 += 10;
		b_3 += 10;
		b_4 += 10;
		b_5 += 10;
		b_6 += 10;
		b_7 += 10;
		b_8 += 10;
		b_9 += 10;


	}


	C[(A_start_index+0)*C_width + B_start_index+0] = c_0_0;
	C[(A_start_index+0)*C_width + B_start_index+1] = c_0_1;
	C[(A_start_index+0)*C_width + B_start_index+2] = c_0_2;
	C[(A_start_index+0)*C_width + B_start_index+3] = c_0_3;
	C[(A_start_index+0)*C_width + B_start_index+4] = c_0_4;
	C[(A_start_index+0)*C_width + B_start_index+5] = c_0_5;
	C[(A_start_index+0)*C_width + B_start_index+6] = c_0_6;
	C[(A_start_index+0)*C_width + B_start_index+7] = c_0_7;
	C[(A_start_index+0)*C_width + B_start_index+8] = c_0_8;
	C[(A_start_index+0)*C_width + B_start_index+9] = c_0_9;
	C[(A_start_index+1)*C_width + B_start_index+0] = c_1_0;
	C[(A_start_index+1)*C_width + B_start_index+1] = c_1_1;
	C[(A_start_index+1)*C_width + B_start_index+2] = c_1_2;
	C[(A_start_index+1)*C_width + B_start_index+3] = c_1_3;
	C[(A_start_index+1)*C_width + B_start_index+4] = c_1_4;
	C[(A_start_index+1)*C_width + B_start_index+5] = c_1_5;
	C[(A_start_index+1)*C_width + B_start_index+6] = c_1_6;
	C[(A_start_index+1)*C_width + B_start_index+7] = c_1_7;
	C[(A_start_index+1)*C_width + B_start_index+8] = c_1_8;
	C[(A_start_index+1)*C_width + B_start_index+9] = c_1_9;
	C[(A_start_index+2)*C_width + B_start_index+0] = c_2_0;
	C[(A_start_index+2)*C_width + B_start_index+1] = c_2_1;
	C[(A_start_index+2)*C_width + B_start_index+2] = c_2_2;
	C[(A_start_index+2)*C_width + B_start_index+3] = c_2_3;
	C[(A_start_index+2)*C_width + B_start_index+4] = c_2_4;
	C[(A_start_index+2)*C_width + B_start_index+5] = c_2_5;
	C[(A_start_index+2)*C_width + B_start_index+6] = c_2_6;
	C[(A_start_index+2)*C_width + B_start_index+7] = c_2_7;
	C[(A_start_index+2)*C_width + B_start_index+8] = c_2_8;
	C[(A_start_index+2)*C_width + B_start_index+9] = c_2_9;
	C[(A_start_index+3)*C_width + B_start_index+0] = c_3_0;
	C[(A_start_index+3)*C_width + B_start_index+1] = c_3_1;
	C[(A_start_index+3)*C_width + B_start_index+2] = c_3_2;
	C[(A_start_index+3)*C_width + B_start_index+3] = c_3_3;
	C[(A_start_index+3)*C_width + B_start_index+4] = c_3_4;
	C[(A_start_index+3)*C_width + B_start_index+5] = c_3_5;
	C[(A_start_index+3)*C_width + B_start_index+6] = c_3_6;
	C[(A_start_index+3)*C_width + B_start_index+7] = c_3_7;
	C[(A_start_index+3)*C_width + B_start_index+8] = c_3_8;
	C[(A_start_index+3)*C_width + B_start_index+9] = c_3_9;
	C[(A_start_index+4)*C_width + B_start_index+0] = c_4_0;
	C[(A_start_index+4)*C_width + B_start_index+1] = c_4_1;
	C[(A_start_index+4)*C_width + B_start_index+2] = c_4_2;
	C[(A_start_index+4)*C_width + B_start_index+3] = c_4_3;
	C[(A_start_index+4)*C_width + B_start_index+4] = c_4_4;
	C[(A_start_index+4)*C_width + B_start_index+5] = c_4_5;
	C[(A_start_index+4)*C_width + B_start_index+6] = c_4_6;
	C[(A_start_index+4)*C_width + B_start_index+7] = c_4_7;
	C[(A_start_index+4)*C_width + B_start_index+8] = c_4_8;
	C[(A_start_index+4)*C_width + B_start_index+9] = c_4_9;
	C[(A_start_index+5)*C_width + B_start_index+0] = c_5_0;
	C[(A_start_index+5)*C_width + B_start_index+1] = c_5_1;
	C[(A_start_index+5)*C_width + B_start_index+2] = c_5_2;
	C[(A_start_index+5)*C_width + B_start_index+3] = c_5_3;
	C[(A_start_index+5)*C_width + B_start_index+4] = c_5_4;
	C[(A_start_index+5)*C_width + B_start_index+5] = c_5_5;
	C[(A_start_index+5)*C_width + B_start_index+6] = c_5_6;
	C[(A_start_index+5)*C_width + B_start_index+7] = c_5_7;
	C[(A_start_index+5)*C_width + B_start_index+8] = c_5_8;
	C[(A_start_index+5)*C_width + B_start_index+9] = c_5_9;
	C[(A_start_index+6)*C_width + B_start_index+0] = c_6_0;
	C[(A_start_index+6)*C_width + B_start_index+1] = c_6_1;
	C[(A_start_index+6)*C_width + B_start_index+2] = c_6_2;
	C[(A_start_index+6)*C_width + B_start_index+3] = c_6_3;
	C[(A_start_index+6)*C_width + B_start_index+4] = c_6_4;
	C[(A_start_index+6)*C_width + B_start_index+5] = c_6_5;
	C[(A_start_index+6)*C_width + B_start_index+6] = c_6_6;
	C[(A_start_index+6)*C_width + B_start_index+7] = c_6_7;
	C[(A_start_index+6)*C_width + B_start_index+8] = c_6_8;
	C[(A_start_index+6)*C_width + B_start_index+9] = c_6_9;
	C[(A_start_index+7)*C_width + B_start_index+0] = c_7_0;
	C[(A_start_index+7)*C_width + B_start_index+1] = c_7_1;
	C[(A_start_index+7)*C_width + B_start_index+2] = c_7_2;
	C[(A_start_index+7)*C_width + B_start_index+3] = c_7_3;
	C[(A_start_index+7)*C_width + B_start_index+4] = c_7_4;
	C[(A_start_index+7)*C_width + B_start_index+5] = c_7_5;
	C[(A_start_index+7)*C_width + B_start_index+6] = c_7_6;
	C[(A_start_index+7)*C_width + B_start_index+7] = c_7_7;
	C[(A_start_index+7)*C_width + B_start_index+8] = c_7_8;
	C[(A_start_index+7)*C_width + B_start_index+9] = c_7_9;
	C[(A_start_index+8)*C_width + B_start_index+0] = c_8_0;
	C[(A_start_index+8)*C_width + B_start_index+1] = c_8_1;
	C[(A_start_index+8)*C_width + B_start_index+2] = c_8_2;
	C[(A_start_index+8)*C_width + B_start_index+3] = c_8_3;
	C[(A_start_index+8)*C_width + B_start_index+4] = c_8_4;
	C[(A_start_index+8)*C_width + B_start_index+5] = c_8_5;
	C[(A_start_index+8)*C_width + B_start_index+6] = c_8_6;
	C[(A_start_index+8)*C_width + B_start_index+7] = c_8_7;
	C[(A_start_index+8)*C_width + B_start_index+8] = c_8_8;
	C[(A_start_index+8)*C_width + B_start_index+9] = c_8_9;
	C[(A_start_index+9)*C_width + B_start_index+0] = c_9_0;
	C[(A_start_index+9)*C_width + B_start_index+1] = c_9_1;
	C[(A_start_index+9)*C_width + B_start_index+2] = c_9_2;
	C[(A_start_index+9)*C_width + B_start_index+3] = c_9_3;
	C[(A_start_index+9)*C_width + B_start_index+4] = c_9_4;
	C[(A_start_index+9)*C_width + B_start_index+5] = c_9_5;
	C[(A_start_index+9)*C_width + B_start_index+6] = c_9_6;
	C[(A_start_index+9)*C_width + B_start_index+7] = c_9_7;
	C[(A_start_index+9)*C_width + B_start_index+8] = c_9_8;
	C[(A_start_index+9)*C_width + B_start_index+9] = c_9_9;


}
